// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  password              String
  emailVerified         DateTime?
  image                 String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  passwords             Password[]
  categories            Category[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Password {
  id         String   @id @default(cuid())
  userId     String
  name       String
  icon       String
  username   String
  password   String
  notes      String?
  categoryId String?
  isFavorite Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
}

model Category {
  id        String     @id @default(cuid())
  userId    String
  name      String
  passwords Password[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}
